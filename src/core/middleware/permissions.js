// src/core/middleware/permissions.js
// Middleware de gestion des permissions pour DiasporaTontine

const { AssociationMember, Association, User } = require('../../models');

/**
 * üîë V√©rifier si un utilisateur a une permission sp√©cifique
 * R√àGLE PRIORITAIRE: admin_association a TOUJOURS tous les droits
 * 
 * @param {Array} userRoles - R√¥les de l'utilisateur dans l'association
 * @param {Object} permissionConfig - Configuration de la permission
 * @param {String} superAdminRole - R√¥le super admin de la plateforme
 * @returns {Boolean}
 */
function hasPermission(userRoles, permissionConfig, superAdminRole = null) {
  // üî• PRIORIT√â ABSOLUE: admin_association a TOUS les droits
  if (userRoles.includes('admin_association')) {
    return true;
  }
  
  // üî• PRIORIT√â 2: super_admin (r√¥le plateforme)
  if (superAdminRole === 'super_admin') {
    return true;
  }
  
  // üîç V√©rification permissions normales
  if (!permissionConfig || !permissionConfig.allowed_roles) {
    return false;
  }
  
  return permissionConfig.allowed_roles.some(role => userRoles.includes(role));
}

/**
 * üõ°Ô∏è Middleware pour v√©rifier l'appartenance √† une association
 * Doit √™tre utilis√© AVANT les autres middlewares de permissions
 */
const checkAssociationMember = async (req, res, next) => {
  try {
    console.log('üîç checkAssociationMember - Debug params:');
    console.log('   req.params:', req.params);
    console.log('   req.user:', req.user?.id);
    
    let associationId = req.params.associationId || req.params.id;
    
    if (!associationId && req.body.associationId) {
      associationId = req.body.associationId;
    }
    
    console.log('   associationId extracted:', associationId);
    
    if (!associationId) {
      return res.status(400).json({
        error: 'ID association manquant',
        code: 'MISSING_ASSOCIATION_ID'
      });
    }
    
    const parsedAssociationId = parseInt(associationId);
    if (isNaN(parsedAssociationId) || parsedAssociationId <= 0) {
      return res.status(400).json({
        error: 'ID association invalide',
        code: 'INVALID_ASSOCIATION_ID',
        received: associationId
      });
    }
    
    if (!req.user?.id) {
      return res.status(401).json({
        error: 'Utilisateur non authentifi√©',
        code: 'NOT_AUTHENTICATED'
      });
    }
    
    const userId = parseInt(req.user.id);
    if (isNaN(userId)) {
      return res.status(401).json({
        error: 'ID utilisateur invalide',
        code: 'INVALID_USER_ID'
      });
    }
    
    console.log('   Recherche membership pour userId:', userId, 'associationId:', parsedAssociationId);
    
    const { AssociationMember, Association, User } = require('../../models');
    
    // ‚úÖ CORRECTION: Ne pas demander workflowRules qui n'existe pas
    const membership = await AssociationMember.findOne({
      where: {
        userId: userId,
        associationId: parsedAssociationId,
        status: 'active'
      },
      include: [
        {
          model: Association,
          as: 'association',
          attributes: ['id', 'name', 'permissionsMatrix'], // ‚ùå Retirer 'workflowRules'
          required: true
        },
        {
          model: User,
          as: 'user',
          attributes: ['id', 'firstName', 'lastName'],
          required: true
        }
      ]
    });
    
    console.log('   Membership trouv√©:', !!membership);
    
    if (!membership) {
      return res.status(403).json({
        error: 'Acc√®s refus√© √† cette association',
        code: 'ACCESS_DENIED'
      });
    }
    
    req.membership = membership;
    req.associationId = parsedAssociationId;
    req.userRoles = membership.roles || [];
    
    console.log('   ‚úÖ Membership valid√©. R√¥les:', req.userRoles);
    
    next();
    
  } catch (error) {
    console.error('‚ùå Erreur v√©rification membre:', error);
    res.status(500).json({
      error: 'Erreur v√©rification membre',
      code: 'MEMBERSHIP_CHECK_ERROR'
    });
  }
};

/**
 * üõ°Ô∏è Middleware g√©n√©rique pour v√©rifier une permission sp√©cifique
 * @param {String} requiredPermission - Nom de la permission √† v√©rifier
 */
function checkAssociationPermission(requiredPermission) {
  return async (req, res, next) => {
    try {
      const membership = req.membership;
      if (!membership) {
        return res.status(403).json({
          error: 'Membership non trouv√©',
          code: 'MEMBERSHIP_REQUIRED'
        });
      }
      
      const userRoles = membership.roles || [];
      const association = membership.association;
      const permissionsMatrix = association.permissionsMatrix || {};
      
      console.log(`üîç V√©rification permission "${requiredPermission}":`);
      console.log('   User roles:', userRoles);
      console.log('   Permission config:', permissionsMatrix[requiredPermission]);
      
      // V√©rification avec admin_association prioritaire
      const hasAccess = hasPermission(
        userRoles, 
        permissionsMatrix[requiredPermission],
        req.user?.role
      );
      
      if (!hasAccess) {
        return res.status(403).json({
          error: 'Droits insuffisants pour cette action',
          code: 'INSUFFICIENT_PERMISSIONS',
          required: requiredPermission,
          userRoles: userRoles,
          allowedRoles: permissionsMatrix[requiredPermission]?.allowed_roles || []
        });
      }
      
      console.log('   ‚úÖ Permission accord√©e');
      next();
      
    } catch (error) {
      console.error('Erreur v√©rification permission:', error);
      res.status(500).json({
        error: 'Erreur v√©rification permissions',
        code: 'PERMISSION_CHECK_ERROR'
      });
    }
  };
}

/**
 * üí∞ Middleware pour v√©rifier les droits de validation financi√®re
 */
const checkFinancialValidationRights = () => {
  return async (req, res, next) => {
    try {
      const membership = req.membership;
      if (!membership) {
        return res.status(403).json({
          error: 'Membership requis',
          code: 'MEMBERSHIP_REQUIRED'
        });
      }
      
      const userRoles = membership.roles || [];
      const association = membership.association;
      
      console.log('üîç V√©rification droits validation financi√®re:');
      console.log('   User roles:', userRoles);
      
      // üî• R√àGLE PRIORITAIRE: admin_association a TOUS les droits
      if (userRoles.includes('admin_association')) {
        console.log('   ‚úÖ admin_association - Acc√®s total accord√©');
        req.canValidateFinances = true;
        return next();
      }
      
      // üî• R√àGLE 2: super_admin plateforme
      if (req.user?.role === 'super_admin') {
        console.log('   ‚úÖ super_admin - Acc√®s total accord√©');
        req.canValidateFinances = true;
        return next();
      }
      
      // ‚úÖ CORRECTION: Utiliser permissionsMatrix au lieu de workflowRules
      const permissionsMatrix = association.permissionsMatrix || {};
      
      // Chercher permission de validation financi√®re dans permissionsMatrix
      let allowedValidators = ['president', 'tresorier', 'secretaire']; // Par d√©faut
      
      // Si permission approve_aids existe, l'utiliser
      if (permissionsMatrix.approve_aids) {
        allowedValidators = permissionsMatrix.approve_aids.allowed_roles || allowedValidators;
      }
      
      // Toujours inclure admin_association
      if (!allowedValidators.includes('admin_association')) {
        allowedValidators.unshift('admin_association');
      }
      
      console.log('   Validateurs autoris√©s:', allowedValidators);
      
      const canValidate = allowedValidators.some(role => userRoles.includes(role));
      
      if (!canValidate) {
        return res.status(403).json({
          error: 'Droits insuffisants pour validation',
          code: 'INSUFFICIENT_VALIDATION_RIGHTS',
          userRoles: userRoles,
          requiredRoles: allowedValidators
        });
      }
      
      console.log('   ‚úÖ Droits validation accord√©s');
      req.canValidateFinances = true;
      next();
      
    } catch (error) {
      console.error('Erreur v√©rification droits validation:', error);
      res.status(500).json({
        error: 'Erreur v√©rification droits validation',
        code: 'VALIDATION_RIGHTS_CHECK_ERROR'
      });
    }
  };
};

/**
 * üìä Middleware pour v√©rifier les droits de consultation financi√®re
 */
const checkFinancialViewRights = () => {
  return async (req, res, next) => {
    try {
      const membership = req.membership;
      if (!membership) {
        return res.status(403).json({
          error: 'Membership requis',
          code: 'MEMBERSHIP_REQUIRED'
        });
      }
      
      const userRoles = membership.roles || [];
      const association = membership.association;
      const permissionsMatrix = association.permissionsMatrix || {};
      
      console.log('üîç V√©rification droits vue financi√®re:');
      console.log('   User roles:', userRoles);
      
      // üî• PRIORIT√â: admin_association a TOUS les droits
      if (userRoles.includes('admin_association')) {
        console.log('   ‚úÖ admin_association - Acc√®s finances accord√©');
        return next();
      }
      
      // üî• PRIORIT√â 2: super_admin
      if (req.user?.role === 'super_admin') {
        console.log('   ‚úÖ super_admin - Acc√®s finances accord√©');
        return next();
      }
      
      // V√©rifier selon configuration permissions
      const financePermissions = permissionsMatrix.view_finances || {
        allowed_roles: ['president', 'tresorier', 'secretaire']
      };
      
      // Toujours inclure admin_association
      if (!financePermissions.allowed_roles.includes('admin_association')) {
        financePermissions.allowed_roles.unshift('admin_association');
      }
      
      console.log('   R√¥les autoris√©s pour finances:', financePermissions.allowed_roles);
      
      const hasFinanceAccess = financePermissions.allowed_roles.some(role => 
        userRoles.includes(role)
      );
      
      if (!hasFinanceAccess) {
        return res.status(403).json({
          error: 'Permissions insuffisantes pour voir les finances',
          code: 'INSUFFICIENT_PERMISSIONS',
          userRoles: userRoles,
          requiredRoles: financePermissions.allowed_roles
        });
      }
      
      console.log('   ‚úÖ Acc√®s finances accord√©');
      next();
      
    } catch (error) {
      console.error('Erreur v√©rification droits finances:', error);
      res.status(500).json({
        error: 'Erreur v√©rification droits finances',
        code: 'FINANCE_RIGHTS_CHECK_ERROR'
      });
    }
  };
};

/**
 * üë• Middleware pour v√©rifier les droits de gestion des membres
 */
const checkMemberManagementRights = () => {
  return checkAssociationPermission('manage_members');
};

/**
 * üìä Middleware pour v√©rifier les droits d'export de donn√©es
 */
const checkDataExportRights = () => {
  return checkAssociationPermission('export_data');
};

/**
 * üìÖ Middleware pour v√©rifier les droits de gestion des √©v√©nements
 */
const checkEventManagementRights = () => {
  return checkAssociationPermission('manage_events');
};

/**
 * üîß Fonction utilitaire pour s'assurer que admin_association est dans toutes les permissions
 * @param {Object} permissionsMatrix - Matrice des permissions
 * @returns {Object} Matrice mise √† jour
 */
function ensureAdminInPermissions(permissionsMatrix) {
  if (!permissionsMatrix || typeof permissionsMatrix !== 'object') {
    return permissionsMatrix;
  }
  
  Object.keys(permissionsMatrix).forEach(permission => {
    const config = permissionsMatrix[permission];
    if (config && config.allowed_roles && Array.isArray(config.allowed_roles)) {
      if (!config.allowed_roles.includes('admin_association')) {
        config.allowed_roles.unshift('admin_association');
      }
    }
  });
  
  return permissionsMatrix;
}

/**
 * üéØ Middleware combin√© pour les routes communes
 */
const requireAssociationAccess = (permission = null) => {
  const middlewares = [checkAssociationMember];
  
  if (permission) {
    middlewares.push(checkAssociationPermission(permission));
  }
  
  return middlewares;
};

/**
 * üí∞ Middleware combin√© pour les routes financi√®res
 */
const requireFinancialAccess = (type = 'view') => {
  const middlewares = [checkAssociationMember];
  
  if (type === 'validate') {
    middlewares.push(checkFinancialValidationRights());
  } else {
    middlewares.push(checkFinancialViewRights());
  }
  
  return middlewares;
};

module.exports = {
  // Fonctions utilitaires
  hasPermission,
  ensureAdminInPermissions,
  
  // Middlewares de base
  checkAssociationMember,
  checkAssociationPermission,
  
  // Middlewares sp√©cialis√©s
  checkFinancialValidationRights,
  checkFinancialViewRights,
  checkMemberManagementRights,
  checkDataExportRights,
  checkEventManagementRights,
  
  // Middlewares combin√©s
  requireAssociationAccess,
  requireFinancialAccess
};