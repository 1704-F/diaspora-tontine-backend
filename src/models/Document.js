'use strict';
const { Model } = require('sequelize');

module.exports = (sequelize, DataTypes) => {
  class Document extends Model {
    static associate(models) {
      // Un document appartient √† un utilisateur
      Document.belongsTo(models.User, {
        foreignKey: 'userId',
        as: 'user'
      });
      
      // Document peut concerner une association
      Document.belongsTo(models.Association, {
        foreignKey: 'associationId',
        as: 'association'
      });
      
      // Document peut concerner une tontine
      Document.belongsTo(models.Tontine, {
        foreignKey: 'tontineId',
        as: 'tontine'
      });
      
      // Document peut √™tre li√© √† une transaction
      Document.belongsTo(models.Transaction, {
        foreignKey: 'transactionId',
        as: 'transaction'
      });
    }

    // G√©n√©rer URL d'acc√®s s√©curis√©
    getSecureUrl() {
      if (!this.fileUrl) return null;
      
      // TODO: Impl√©menter signature temporaire pour s√©curit√©
      return this.fileUrl;
    }

    // V√©rifier si document est valide (non expir√©)
    isValid() {
      if (!this.expiresAt) return true;
      return new Date() < new Date(this.expiresAt);
    }

    // V√©rifier int√©grit√© avec hash blockchain
    async verifyIntegrity() {
      if (!this.blockchainHash) return false;
      
      // TODO: Impl√©menter v√©rification hash blockchain
      return true;
    }

    // Obtenir statut format√©
    getFormattedStatus() {
      const statuses = {
        'pending': 'En attente',
        'validated': 'Valid√©',
        'rejected': 'Rejet√©',
        'expired': 'Expir√©',
        'processing': 'En cours'
      };
      
      return statuses[this.status] || this.status;
    }

    // V√©rifier si t√©l√©chargeable
    isDownloadable() {
      return ['validated', 'pending'].includes(this.status) && 
             this.fileUrl && 
             this.isValid();
    }
  }

  Document.init({
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    
    // üîó RELATIONS CONTEXTUELLES
    userId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'users',
        key: 'id'
      },
      comment: 'Propri√©taire du document'
    },
    
    associationId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'associations',
        key: 'id'
      },
      comment: 'Association concern√©e (si applicable)'
    },
    
    tontineId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'tontines',
        key: 'id'
      },
      comment: 'Tontine concern√©e (si applicable)'
    },
    
    transactionId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'transactions',
        key: 'id'
      },
      comment: 'Transaction li√©e (pour attestations)'
    },
    
    // üè∑Ô∏è CLASSIFICATION DOCUMENT
    type: {
      type: DataTypes.ENUM(
        // üìÑ KYC/KYB
        'identity_card',          // Carte identit√©
        'passport',              // Passeport
        'driver_license',        // Permis conduire
        'residence_permit',      // Titre s√©jour
        'proof_address',         // Justificatif domicile
        'iban_proof',           // RIB
        
        // üèõÔ∏è Association
        'association_statuts',   // Statuts association
        'association_receipt',   // R√©c√©piss√© d√©claration
        'meeting_minutes',       // PV r√©unions
        'financial_report',      // Rapport financier
        
        // üí∞ Tontine
        'tontine_rules',        // R√®glement tontine
        'debt_attestation',     // Attestation dette
        'completion_certificate', // Attestation fin tontine
        'default_notice',       // Avis d√©faillance
        
        // üìä Attestations g√©n√©r√©es
        'contribution_certificate', // Attestation cotisations
        'membership_certificate',   // Attestation adh√©sion
        'payment_receipt',          // Re√ßu paiement
        
        // üìÅ Autres
        'contract',             // Contrat
        'invoice',              // Facture
        'other'                 // Autre
      ),
      allowNull: false,
      comment: 'Type de document'
    },
    
    category: {
      type: DataTypes.STRING(50),
      allowNull: true,
      comment: 'Cat√©gorie sp√©cifique (configurable)'
    },
    
    // üìã M√âTADONN√âES DOCUMENT
    title: {
      type: DataTypes.STRING(255),
      allowNull: false,
      comment: 'Titre du document'
    },
    
    description: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Description d√©taill√©e'
    },
    
    // üìÅ FICHIER
    fileName: {
      type: DataTypes.STRING(255),
      allowNull: false,
      comment: 'Nom original du fichier'
    },
    
    fileUrl: {
      type: DataTypes.STRING(500),
      allowNull: false,
      comment: 'URL d\'acc√®s au fichier (Cloudinary, S3, etc.)'
    },
    
    filePath: {
      type: DataTypes.STRING(500),
      allowNull: true,
      comment: 'Chemin stockage local (backup)'
    },
    
    fileSize: {
      type: DataTypes.INTEGER,
      allowNull: true,
      comment: 'Taille fichier en bytes'
    },
    
    mimeType: {
      type: DataTypes.STRING(100),
      allowNull: false,
      comment: 'Type MIME (application/pdf, image/jpeg, etc.)'
    },
    
    fileHash: {
      type: DataTypes.STRING(255),
      allowNull: true,
      comment: 'Hash SHA256 du fichier (int√©grit√©)'
    },
    
    // üîê S√âCURIT√â & VALIDATION
    status: {
      type: DataTypes.ENUM('pending', 'validated', 'rejected', 'expired', 'processing'),
      allowNull: false,
      defaultValue: 'pending',
      comment: 'Statut de validation'
    },
    
    validatedBy: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'users',
        key: 'id'
      },
      comment: 'Utilisateur ayant valid√©'
    },
    
    validatedAt: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Date validation'
    },
    
    rejectionReason: {
      type: DataTypes.STRING(255),
      allowNull: true,
      comment: 'Raison du rejet'
    },
    
    // üìÖ DATES VALIDIT√â
    issuedDate: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Date √©mission document'
    },
    
    expiresAt: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Date expiration (si applicable)'
    },
    
    // üîó BLOCKCHAIN & AUDIT
    blockchainHash: {
      type: DataTypes.STRING(255),
      allowNull: true,
      comment: 'Hash blockchain pour preuve l√©gale'
    },
    
    blockchainNetwork: {
      type: DataTypes.STRING(50),
      allowNull: true,
      comment: 'R√©seau blockchain utilis√©'
    },
    
    transactionHash: {
      type: DataTypes.STRING(255),
      allowNull: true,
      comment: 'Hash transaction blockchain'
    },
    
    // üéØ G√âN√âRATION AUTOMATIQUE
    isGenerated: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
      comment: 'Document g√©n√©r√© automatiquement par app'
    },
    
    templateUsed: {
      type: DataTypes.STRING(100),
      allowNull: true,
      comment: 'Template utilis√© pour g√©n√©ration'
    },
    
    generationData: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'Donn√©es utilis√©es pour g√©n√©ration'
    },
    
    // üëÅÔ∏è ACC√àS & VISIBILIT√â
    visibility: {
      type: DataTypes.ENUM('private', 'association', 'tontine', 'bureau', 'public'),
      allowNull: false,
      defaultValue: 'private',
      comment: 'Niveau visibilit√© document'
    },
    
    accessCount: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 0,
      comment: 'Nombre d\'acc√®s au document'
    },
    
    lastAccessedAt: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Dernier acc√®s'
    },
    
    // üì± M√âTADONN√âES UPLOAD
    uploadedFrom: {
      type: DataTypes.STRING(20),
      allowNull: false,
      defaultValue: 'mobile',
      comment: 'Source upload (mobile, web, admin)'
    },
    
    deviceInfo: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'Info appareil upload (debug)'
    },
    
    // üîÑ VERSIONING
    version: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 1,
      comment: 'Version du document'
    },
    
    parentDocumentId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'documents',
        key: 'id'
      },
      comment: 'Document parent (pour versions)'
    },
    
    // üìù NOTES & COMMENTAIRES
    adminNotes: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Notes internes admin'
    },
    
    publicComments: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Commentaires visibles utilisateur'
    },
    
    // üìä M√âTADONN√âES ADDITIONNELLES
    metadata: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'M√©tadonn√©es sp√©cifiques au type document'
    },
    
    tags: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'Tags pour recherche et classification'
    }
  }, {
    sequelize,
    modelName: 'Document',
    tableName: 'documents',
    underscored: true,
    timestamps: true,
    
    indexes: [
      {
        fields: ['user_id']
      },
      {
        fields: ['association_id']
      },
      {
        fields: ['tontine_id']
      },
      {
        fields: ['type']
      },
      {
        fields: ['status']
      },
      {
        fields: ['file_hash']
      },
      {
        fields: ['blockchain_hash']
      },
      {
        fields: ['expires_at']
      },
      {
        fields: ['validated_at']
      },
      {
        fields: ['visibility']
      }
    ]
  });

  return Document;
};