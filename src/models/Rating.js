'use strict';
const { Model } = require('sequelize');

module.exports = (sequelize, DataTypes) => {
  class Rating extends Model {
    static associate(models) {
      // Une notation appartient √† un utilisateur qui note
      Rating.belongsTo(models.User, {
        foreignKey: 'raterUserId',
        as: 'rater'
      });
      
      // Une notation concerne un utilisateur not√©
      Rating.belongsTo(models.User, {
        foreignKey: 'ratedUserId',
        as: 'ratedUser'
      });
      
      // Une notation concerne une tontine
      Rating.belongsTo(models.Tontine, {
        foreignKey: 'tontineId',
        as: 'tontine'
      });
      
      // Une notation peut concerner une participation sp√©cifique
      Rating.belongsTo(models.TontineParticipant, {
        foreignKey: 'participantId',
        as: 'participant'
      });
    }

    // V√©rifier si notation peut √™tre modifi√©e
    canBeModified() {
      if (this.isLocked) return false;
      
      const daysSinceCreated = Math.floor((new Date() - this.createdAt) / (1000 * 60 * 60 * 24));
      return daysSinceCreated <= 30; // 30 jours pour modifier
    }

    // Calculer score global de la notation
    getOverallScore() {
      const scores = [];
      
      if (this.punctualityScore !== null) scores.push(this.punctualityScore);
      if (this.communicationScore !== null) scores.push(this.communicationScore);
      if (this.reliabilityScore !== null) scores.push(this.reliabilityScore);
      if (this.collaborationScore !== null) scores.push(this.collaborationScore);
      
      if (scores.length === 0) return null;
      
      const average = scores.reduce((sum, score) => sum + score, 0) / scores.length;
      return Math.round(average * 100) / 100;
    }

    // V√©rifier si notation est compl√®te
    isComplete() {
      return this.overallScore !== null && 
             this.punctualityScore !== null &&
             this.reliabilityScore !== null;
    }

    // Obtenir le niveau de la notation
    getRatingLevel() {
      const score = this.overallScore || this.getOverallScore();
      if (!score) return 'unrated';
      
      if (score >= 4.5) return 'excellent';
      if (score >= 3.5) return 'good';
      if (score >= 2.5) return 'average';
      if (score >= 1.5) return 'poor';
      return 'very_poor';
    }
  }

  Rating.init({
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    
    // üîó RELATIONS PRINCIPALES
    raterUserId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'users',
        key: 'id'
      },
      comment: 'Utilisateur qui donne la note'
    },
    
    ratedUserId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'users',
        key: 'id'
      },
      comment: 'Utilisateur qui re√ßoit la note'
    },
    
    tontineId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'tontines',
        key: 'id'
      },
      comment: 'Tontine dans laquelle la notation a lieu'
    },
    
    participantId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'tontine_participants',
        key: 'id'
      },
      comment: 'Participation sp√©cifique not√©e (optionnel)'
    },
    
    // üéØ TYPE DE NOTATION
    ratingType: {
      type: DataTypes.ENUM(
        'participant_to_organizer',    // Participant note organisateur
        'organizer_to_participant',    // Organisateur note participant
        'participant_to_participant',  // Participant note autre participant
        'mutual_rating'               // Notation mutuelle
      ),
      allowNull: false
    },
    
    context: {
      type: DataTypes.ENUM(
        'tontine_completion',         // √Ä la fin de la tontine
        'monthly_evaluation',         // √âvaluation mensuelle
        'incident_related',          // Suite √† un incident
        'mid_term_review',           // R√©vision mi-parcours
        'voluntary'                  // Notation volontaire
      ),
      allowNull: false,
      defaultValue: 'tontine_completion'
    },
    
    // ‚≠ê SCORES D√âTAILL√âS (0.0 - 5.0)
    overallScore: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0.00,
        max: 5.00
      },
      comment: 'Note globale g√©n√©rale'
    },
    
    punctualityScore: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0.00,
        max: 5.00
      },
      comment: 'Ponctualit√© des paiements/participation'
    },
    
    communicationScore: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0.00,
        max: 5.00
      },
      comment: 'Qualit√© de la communication'
    },
    
    reliabilityScore: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0.00,
        max: 5.00
      },
      comment: 'Fiabilit√© g√©n√©rale'
    },
    
    collaborationScore: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0.00,
        max: 5.00
      },
      comment: 'Esprit de collaboration'
    },
    
    organizationScore: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0.00,
        max: 5.00
      },
      comment: 'Capacit√© d\'organisation (pour organisateurs)'
    },
    
    transparencyScore: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0.00,
        max: 5.00
      },
      comment: 'Transparence financi√®re (pour organisateurs)'
    },
    
    fairnessScore: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0.00,
        max: 5.00
      },
      comment: '√âquit√© dans les d√©cisions'
    },
    
    // üìù COMMENTAIRES
    positiveComment: {
      type: DataTypes.TEXT,
      allowNull: true,
      validate: {
        len: [0, 1000]
      },
      comment: 'Commentaire positif'
    },
    
    negativeComment: {
      type: DataTypes.TEXT,
      allowNull: true,
      validate: {
        len: [0, 1000]
      },
      comment: 'Points d\'am√©lioration'
    },
    
    privateComment: {
      type: DataTypes.TEXT,
      allowNull: true,
      validate: {
        len: [0, 500]
      },
      comment: 'Commentaire priv√© (admin uniquement)'
    },
    
    // üè∑Ô∏è TAGS & CAT√âGORIES
    strengths: {
      type: DataTypes.JSON,
      allowNull: true,
      defaultValue: [],
      comment: 'Points forts identifi√©s'
    },
    
    weaknesses: {
      type: DataTypes.JSON,
      allowNull: true,
      defaultValue: [],
      comment: 'Points faibles identifi√©s'
    },
    
    recommendedActions: {
      type: DataTypes.JSON,
      allowNull: true,
      defaultValue: [],
      comment: 'Actions recommand√©es'
    },
    
    // üìä √âVALUATION D√âTAILL√âE
    criteriaEvaluation: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: '√âvaluation d√©taill√©e par crit√®res personnalis√©s'
    },
    
    behaviorMetrics: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'M√©triques comportementales (retards, absences, etc.)'
    },
    
    // ü§ù RECOMMANDATION
    wouldRecommend: {
      type: DataTypes.BOOLEAN,
      allowNull: true,
      comment: 'Recommanderait cette personne √† d\'autres'
    },
    
    wouldParticipateAgain: {
      type: DataTypes.BOOLEAN,
      allowNull: true,
      comment: 'Participerait √† nouveau avec cette personne'
    },
    
    recommendationLevel: {
      type: DataTypes.ENUM('strongly_recommend', 'recommend', 'neutral', 'not_recommend', 'strongly_against'),
      allowNull: true
    },
    
    // üìÖ P√âRIODE √âVALU√âE
    evaluationPeriodStart: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'D√©but de la p√©riode √©valu√©e'
    },
    
    evaluationPeriodEnd: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Fin de la p√©riode √©valu√©e'
    },
    
    // üîí STATUT & VISIBILIT√â
    status: {
      type: DataTypes.ENUM('draft', 'submitted', 'published', 'disputed', 'archived'),
      allowNull: false,
      defaultValue: 'draft'
    },
    
    visibility: {
      type: DataTypes.ENUM('private', 'tontine_members', 'public', 'platform_admin'),
      allowNull: false,
      defaultValue: 'tontine_members'
    },
    
    isAnonymous: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      comment: 'Notation anonyme'
    },
    
    isLocked: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      comment: 'Verrouill√©e contre modifications'
    },
    
    // üö® INCIDENTS & LITIGES
    hasIncidents: {
      type: DataTypes.BOOLEAN,
      defaultValue: false
    },
    
    incidentDetails: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'D√©tails des incidents rapport√©s'
    },
    
    isDisputed: {
      type: DataTypes.BOOLEAN,
      defaultValue: false
    },
    
    disputeReason: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    
    disputeResolution: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    
    // ‚öñÔ∏è MOD√âRATION
    flaggedForReview: {
      type: DataTypes.BOOLEAN,
      defaultValue: false
    },
    
    moderationNotes: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Notes √©quipe mod√©ration'
    },
    
    reviewedAt: {
      type: DataTypes.DATE,
      allowNull: true
    },
    
    reviewedBy: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'users',
        key: 'id'
      }
    },
    
    // üìà IMPACT
    impactOnReputation: {
      type: DataTypes.DECIMAL(4, 2),
      allowNull: true,
      comment: 'Impact calcul√© sur r√©putation (-10.00 √† +10.00)'
    },
    
    weightFactor: {
      type: DataTypes.DECIMAL(3, 2),
      defaultValue: 1.00,
      comment: 'Poids de cette notation (0.1 √† 2.0)'
    },
    
    // üîÑ SUIVI
    hasFollowUp: {
      type: DataTypes.BOOLEAN,
      defaultValue: false
    },
    
    followUpDate: {
      type: DataTypes.DATE,
      allowNull: true
    },
    
    followUpActions: {
      type: DataTypes.JSON,
      allowNull: true
    },
    
    // üì± TECHNICAL METADATA
   deviceInfo: {
     type: DataTypes.JSON,
     allowNull: true,
     comment: 'Device utilis√© pour la notation'
   },
   
   ipAddress: {
     type: DataTypes.STRING,
     allowNull: true
   },
   
   userAgent: {
     type: DataTypes.TEXT,
     allowNull: true
   },
   
   // üìä ANALYTICS
   viewCount: {
     type: DataTypes.INTEGER,
     defaultValue: 0,
     comment: 'Nombre de fois consult√©e'
   },
   
   helpfulVotes: {
     type: DataTypes.INTEGER,
     defaultValue: 0,
     comment: 'Votes "utile" re√ßus'
   },
   
   // ‚è∞ TIMING
   submittedAt: {
     type: DataTypes.DATE,
     allowNull: true
   },
   
   publishedAt: {
     type: DataTypes.DATE,
     allowNull: true
   },
   
   lastModifiedAt: {
     type: DataTypes.DATE,
     allowNull: true
   },
   
   expiresAt: {
     type: DataTypes.DATE,
     allowNull: true,
     comment: 'Date expiration de la notation'
   }
   
 }, {
   sequelize,
   modelName: 'Rating',
   tableName: 'ratings',
   underscored: true,
   timestamps: true,
   paranoid: true, // Soft delete
   
   hooks: {
     beforeCreate: (rating) => {
       // Calculer score global automatiquement
       if (!rating.overallScore) {
         rating.overallScore = rating.getOverallScore();
       }
       
       // Date de soumission
       if (rating.status === 'submitted' && !rating.submittedAt) {
         rating.submittedAt = new Date();
       }
       
       // Calculer impact sur r√©putation
       if (rating.overallScore) {
         const impact = (rating.overallScore - 2.5) * 2; // Scale -5 to +5
         rating.impactOnReputation = Math.round(impact * 100) / 100;
       }
     },
     
     beforeUpdate: (rating) => {
       // Recalculer score global si scores individuels changent
       const scoreFields = ['punctualityScore', 'communicationScore', 'reliabilityScore', 'collaborationScore'];
       if (scoreFields.some(field => rating.changed(field))) {
         rating.overallScore = rating.getOverallScore();
       }
       
       // Date de soumission
       if (rating.changed('status') && rating.status === 'submitted' && !rating.submittedAt) {
         rating.submittedAt = new Date();
       }
       
       // Date de publication
       if (rating.changed('status') && rating.status === 'published' && !rating.publishedAt) {
         rating.publishedAt = new Date();
       }
       
       // Date derni√®re modification
       rating.lastModifiedAt = new Date();
       
       // Verrouiller automatiquement apr√®s publication
       if (rating.changed('status') && rating.status === 'published') {
         rating.isLocked = true;
       }
     },
     
     afterCreate: async (rating) => {
       console.log(`‚≠ê Nouvelle notation: ${rating.raterUserId} ‚Üí ${rating.ratedUserId} (Tontine ${rating.tontineId})`);
       
       // Mettre √† jour score r√©putation utilisateur not√©
       const ratedUser = await rating.getRatedUser();
       if (ratedUser && rating.overallScore) {
         // TODO: Recalculer moyenne r√©putation tontines
       }
     },
     
     afterUpdate: async (rating) => {
       // Recalculer r√©putation si score modifi√©
       if (rating.changed('overallScore') && rating.status === 'published') {
         const ratedUser = await rating.getRatedUser();
         if (ratedUser) {
           console.log(`üìä Mise √† jour r√©putation User ${ratedUser.id}`);
           // TODO: Recalculer score r√©putation
         }
       }
       
       // Log si notation contest√©e
       if (rating.changed('isDisputed') && rating.isDisputed) {
         console.log(`üö® Notation contest√©e: Rating ${rating.id} - Raison: ${rating.disputeReason}`);
       }
     }
   },
   
   indexes: [
     { fields: ['rater_user_id'] },
     { fields: ['rated_user_id'] },
     { fields: ['tontine_id'] },
     { fields: ['participant_id'] },
     { fields: ['rating_type'] },
     { fields: ['status'] },
     { fields: ['overall_score'] },
     { fields: ['is_disputed'] },
     { fields: ['flagged_for_review'] },
     { fields: ['submitted_at'] },
     { fields: ['published_at'] },
     // Index compos√© pour √©viter doublons
     { fields: ['rater_user_id', 'rated_user_id', 'tontine_id'], unique: true },
     // Index pour recherche notations utilisateur
     { fields: ['rated_user_id', 'status', 'published_at'] },
     { fields: ['tontine_id', 'rating_type', 'status'] }
   ],
   
   validate: {
     // Validation: ne peut pas se noter soi-m√™me
     cannotSelfRate() {
       if (this.raterUserId === this.ratedUserId) {
         throw new Error('Un utilisateur ne peut pas se noter lui-m√™me');
       }
     },
     
     // Validation: scores coh√©rents
     scoresConsistency() {
       const scores = [this.punctualityScore, this.communicationScore, this.reliabilityScore, this.collaborationScore].filter(s => s !== null);
       if (scores.length > 0 && this.overallScore) {
         const calculatedAverage = scores.reduce((sum, score) => sum + score, 0) / scores.length;
         const difference = Math.abs(calculatedAverage - this.overallScore);
         if (difference > 1.0) {
           throw new Error('Le score global doit √™tre coh√©rent avec les scores d√©taill√©s');
         }
       }
     }
   }
 });

 return Rating;
};