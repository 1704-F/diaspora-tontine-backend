// src/server.js
require('dotenv').config();
const app = require('./app');
const sequelize = require('./core/database/database');
const fs = require('fs');
const path = require('path');

const PORT = process.env.PORT || 3000;

// Cr√©er le dossier logs s'il n'existe pas
const logsDir = path.join(__dirname, '../logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

// Test de connexion √† la base de donn√©es
async function startServer() {
  try {
    console.log('üöÄ DIASPORA TONTINE BACKEND - D√©marrage...\n');

    // üîç Test connexion PostgreSQL
    await sequelize.authenticate();
    console.log('‚úÖ Connexion PostgreSQL √©tablie avec succ√®s');

    // üîç Test connexion Redis (optionnel)
    try {
      const redisClient = require('./core/redis/redis');
      if (redisClient && typeof redisClient.ping === 'function') {
        await redisClient.ping();
        console.log('‚úÖ Connexion Redis √©tablie avec succ√®s');
      } else {
        console.log('‚ö†Ô∏è  Redis non configur√©, fonctionnement sans cache');
      }
    } catch (redisError) {
      console.log('‚ö†Ô∏è  Redis non disponible, fonctionnement sans cache');
    }

    // üîÑ Synchronisation des mod√®les (uniquement en dev)
    if (process.env.NODE_ENV === 'development') {
      console.log('\nüîÑ SYNCHRONISATION MOD√àLES (Mode d√©veloppement)...');

      const models = require('./models');
      console.log(`üìã ${Object.keys(models).filter(k => typeof models[k] === 'function').length} mod√®les charg√©s\n`);

      // V√©rifier int√©grit√©
      const integrityIssues = models.checkModelsIntegrity();
      if (integrityIssues.length > 0) {
        console.error('‚ùå PROBL√àMES D\'INT√âGRIT√â D√âTECT√âS:');
        integrityIssues.forEach(issue => console.error(`   - ${issue}`));
        console.error('\nüõë Arr√™t du serveur pour correction...\n');
        process.exit(1);
      }

      // Synchronisation ordonn√©e
      console.log('üîÑ Synchronisation en cours...');

      try {
        // 1. Tables ind√©pendantes
        if (models.User) {
          await models.User.sync({ alter: true });
          console.log('   ‚úÖ User synchronis√©');
        }

        // 2. Tables principales modules
        if (models.Association) {
          await models.Association.sync({ alter: true });
          console.log('   ‚úÖ Association synchronis√©');
        }

        if (models.Tontine) {
          await models.Tontine.sync({ alter: true });
          console.log('   ‚úÖ Tontine synchronis√©');
        }

        // 3. Tables relations
        if (models.Section) {
          const sectionExists = await sequelize.getQueryInterface().showAllTables()
            .then(tables => tables.includes('sections'));
          if (sectionExists) {
            await models.Section.sync({ force: false });
            console.log('   ‚úÖ Section synchronis√© (sans alter - table existante)');
          } else {
            await models.Section.sync({ alter: true });
            console.log('   ‚úÖ Section synchronis√© (cr√©ation initiale)');
          }
        }

        if (models.AssociationMember) {
          await models.AssociationMember.sync({ alter: true });
          console.log('   ‚úÖ AssociationMember synchronis√©');
        }

        if (models.TontineParticipant) {
          await models.TontineParticipant.sync({ alter: true });
          console.log('   ‚úÖ TontineParticipant synchronis√©');
        }

        // 4. Tables transactionnelles
        if (models.Transaction) {
          await models.Transaction.sync({ alter: true });
          console.log('   ‚úÖ Transaction synchronis√©');
        }

        // ‚ûï AJOUT : nouveaux mod√®les avant Document
        if (models.ExpenseRequest) {
          await models.ExpenseRequest.sync({ alter: true });
          console.log('   ‚úÖ ExpenseRequest synchronis√©');
        }

        if (models.IncomeEntry) {
          await models.IncomeEntry.sync({ alter: true });
          console.log('   ‚úÖ IncomeEntry synchronis√©');
        }

        if (models.LoanRepayment) {
          await models.LoanRepayment.sync({ alter: true });
          console.log('   ‚úÖ LoanRepayment synchronis√©');
        }

        if (models.Document) {
          await models.Document.sync({ alter: true });
          console.log('   ‚úÖ Document synchronis√©');
        }

        if (models.Rating) {
          await models.Rating.sync({ alter: true });
          console.log('   ‚úÖ Rating synchronis√©');
        }

        // 5. Tables support
        if (models.Event) {
          await models.Event.sync({ alter: true });
          console.log('   ‚úÖ Event synchronis√©');
        }

        console.log('\n‚úÖ Synchronisation termin√©e avec succ√®s !');

        const summary = models.getModelsSummary();
        console.log('\nüìä ARCHITECTURE SYNCHRONIS√âE:');
        console.log(`   üèóÔ∏è  Core: ${summary.coreModels}/3 mod√®les`);
        console.log(`   üèõÔ∏è  Association: ${summary.associationModels}/5 mod√®les`);
        console.log(`   üí∞ Tontine: ${summary.tontineModels}/3 mod√®les`);
        console.log(`   üìÖ Support: ${summary.supportModels}/1 mod√®les`);
        console.log(`   üìà Total: ${summary.totalModels} mod√®les\n`);

      } catch (syncError) {
        console.error('‚ùå ERREUR SYNCHRONISATION:', syncError.message);
        console.error('üìç Stack:', syncError.stack);
        console.error('\nüõë Impossible de synchroniser la base de donn√©es\n');
        process.exit(1);
      }
    } else {
      console.log('‚ö° Mode production - Synchronisation d√©sactiv√©e');

      const models = require('./models');
      const integrityIssues = models.checkModelsIntegrity();
      if (integrityIssues.length > 0) {
        console.error('‚ùå PROBL√àMES D\'INT√âGRIT√â EN PRODUCTION:');
        integrityIssues.forEach(issue => console.error(`   - ${issue}`));
        process.exit(1);
      }
      console.log('‚úÖ Mod√®les charg√©s et v√©rifi√©s\n');
    }

    // üöÄ D√©marrage serveur HTTP
    const server = app.listen(PORT, () => {
      console.log('üéØ ================================');
      console.log('üöÄ DIASPORA TONTINE API D√âMARR√âE');
      console.log('üéØ ================================');
      console.log(`üì° Port: ${PORT}`);
      console.log(`üåç Environnement: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üïê Heure: ${new Date().toLocaleString('fr-FR')}`);
      console.log('üéØ ================================');
      console.log('');
      console.log('üîó Endpoints disponibles:');
      console.log(`   üìä Health check: http://localhost:${PORT}/health`);
      console.log(`   üîê Auth: http://localhost:${PORT}/api/v1/auth/*`);
      console.log(`   üèõÔ∏è  Associations: http://localhost:${PORT}/api/v1/associations/*`);
      console.log(`   üí∞ Tontines: http://localhost:${PORT}/api/v1/tontines/*`);
      console.log(`   üìã API Doc: http://localhost:${PORT}/api-docs (futur)`);
      console.log('');
      console.log('‚úÖ Pr√™t √† recevoir les requ√™tes !\n');
    });

    // Gestion graceful shutdown
    process.on('SIGTERM', () => {
      console.log('\nüõë Signal SIGTERM re√ßu, arr√™t graceful...');
      server.close(() => {
        console.log('‚úÖ Serveur HTTP ferm√©');
        sequelize.close().then(() => {
          console.log('‚úÖ Connexion DB ferm√©e');
          process.exit(0);
        });
      });
    });

    process.on('SIGINT', () => {
      console.log('\nüõë Signal SIGINT re√ßu (Ctrl+C), arr√™t graceful...');
      server.close(() => {
        console.log('‚úÖ Serveur HTTP ferm√©');
        sequelize.close().then(() => {
          console.log('‚úÖ Connexion DB ferm√©e');
          process.exit(0);
        });
      });
    });

    process.on('uncaughtException', (error) => {
      console.error('‚ùå ERREUR NON CATCH√âE:', error);
      process.exit(1);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå PROMESSE REJET√âE NON G√âR√âE:', reason);
      console.error('üîç Promise:', promise);
      process.exit(1);
    });

  } catch (error) {
    console.error('‚ùå ERREUR D√âMARRAGE SERVEUR:');
    console.error('üìç Message:', error.message);
    console.error('üìç Stack:', error.stack);

    if (error.name === 'SequelizeConnectionError') {
      console.error('\nüí° AIDE CONNEXION DB:');
      console.error('   - V√©rifiez que PostgreSQL est d√©marr√©');
      console.error('   - V√©rifiez les variables DB_* dans .env');
      console.error('   - V√©rifiez les droits d\'acc√®s √† la base');
    }

    if (error.code === 'EADDRINUSE') {
      console.error(`\nüí° Le port ${PORT} est d√©j√† utilis√©`);
      console.error('   - Changez la variable PORT dans .env');
      console.error('   - Ou arr√™tez le processus utilisant ce port');
    }

    console.error('\nüõë Arr√™t du serveur\n');
    process.exit(1);
  }
}

// Tests de sant√© externes (Stripe/Twilio)
async function runHealthChecks() {
  console.log('üîç Tests de sant√© des services...');

  if (process.env.STRIPE_SECRET_KEY) {
    try {
      const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
      await stripe.balance.retrieve();
      console.log('‚úÖ Stripe: Connect√©');
    } catch (stripeError) {
      console.warn('‚ö†Ô∏è  Stripe: Erreur connexion -', stripeError.message);
    }
  } else {
    console.log('‚ö™ Stripe: Non configur√© (dev)');
  }

  if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {
    try {
      const twilio = require('twilio')(
        process.env.TWILIO_ACCOUNT_SID,
        process.env.TWILIO_AUTH_TOKEN
      );
      await twilio.api.accounts(process.env.TWILIO_ACCOUNT_SID).fetch();
      console.log('‚úÖ Twilio: Connect√©');
    } catch (twilioError) {
      console.warn('‚ö†Ô∏è  Twilio: Erreur connexion -', twilioError.message);
    }
  } else {
    console.log('‚ö™ Twilio: Non configur√© (dev)');
  }

  console.log('');
}

// Point d'entr√©e principal
(async () => {
  try {
    if (process.env.NODE_ENV !== 'test') {
      await runHealthChecks();
    }
    await startServer();
  } catch (error) {
    console.error('‚ùå √âCHEC D√âMARRAGE:', error.message);
    process.exit(1);
  }
})();

module.exports = app;
