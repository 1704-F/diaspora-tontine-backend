// src/modules/associations/routes/expenseRequests.js - VERSION CORRIG√âE
// Routes compl√®tes pour gestion financi√®re association

const express = require('express');
const router = express.Router();
const { body, param, query } = require('express-validator');
const { authenticate: authMiddleware } = require('../../../core/auth/middleware/auth');
const { handleValidationErrors } = require('../../../core/middleware/validation');

// ‚úÖ IMPORT PERMISSIONS CORRIG√â
const { checkAssociationMember, checkPermission } = require('../../../core/middleware/checkPermission');

const expenseRequestController = require('../controllers/expenseRequestController');

// ‚ùå SUPPRIMER ce middleware local qui fait doublon
/*
const checkValidationRights = async (req, res, next) => {
  // Code supprim√© car remplac√© par checkFinancialValidationRights
};
*/

// üìã VALIDATIONS (inchang√©es)
const validateCreateExpenseRequest = [
  param('associationId')
    .isInt({ min: 1 })
    .withMessage('ID association invalide'),
    
  body('expenseType')
    .isIn(['aide_membre', 'depense_operationnelle', 'pret_partenariat', 'projet_special', 'urgence_communautaire'])
    .withMessage('Type de d√©pense invalide'),
    
  body('title')
    .trim()
    .isLength({ min: 5, max: 255 })
    .withMessage('Titre requis (5-255 caract√®res)'),
    
  body('description')
    .trim()
    .isLength({ min: 20, max: 2000 })
    .withMessage('Description requise (20-2000 caract√®res)'),
    
  body('amountRequested')
    .isFloat({ min: 0.01, max: 1000000 })
    .withMessage('Montant invalide (0.01 - 1,000,000)'),
    
  body('currency')
    .optional()
    .isIn(['EUR', 'USD', 'GBP', 'CAD', 'CHF', 'XOF', 'XAF'])
    .withMessage('Devise non support√©e'),
    
  body('urgencyLevel')
    .optional()
    .isIn(['low', 'normal', 'high', 'critical'])
    .withMessage('Niveau urgence invalide'),
    
  body('beneficiaryId')
    .optional()
    .isInt({ min: 1 })
    .withMessage('ID b√©n√©ficiaire invalide'),
    
  body('beneficiaryExternal')
    .optional()
    .isObject()
    .withMessage('B√©n√©ficiaire externe doit √™tre un objet'),
    
  body('isLoan')
    .optional()
    .isBoolean()
    .withMessage('isLoan doit √™tre boolean'),
    
  body('loanTerms')
    .optional()
    .isObject()
    .withMessage('Conditions pr√™t doivent √™tre un objet'),
    
  body('documents')
    .optional()
    .isArray()
    .withMessage('Documents doivent √™tre un tableau'),
    
  body('externalReferences')
    .optional()
    .isObject()
    .withMessage('R√©f√©rences externes doivent √™tre un objet'),
    
  handleValidationErrors
];

const validateUpdateExpenseRequest = [
  param('associationId')
    .isInt({ min: 1 })
    .withMessage('ID association invalide'),
    
  param('requestId')
    .isInt({ min: 1 })
    .withMessage('ID demande invalide'),
    
  body('title')
    .optional()
    .trim()
    .isLength({ min: 5, max: 255 })
    .withMessage('Titre: 5-255 caract√®res'),
    
  body('description')
    .optional()
    .trim()
    .isLength({ min: 20, max: 2000 })
    .withMessage('Description: 20-2000 caract√®res'),
    
  body('amountRequested')
    .optional()
    .isFloat({ min: 0.01, max: 1000000 })
    .withMessage('Montant invalide'),
    
  body('urgencyLevel')
    .optional()
    .isIn(['low', 'normal', 'high', 'critical'])
    .withMessage('Niveau urgence invalide'),
    
  handleValidationErrors
];

const validateApprovalAction = [
  param('associationId')
    .isInt({ min: 1 })
    .withMessage('ID association invalide'),
    
  param('requestId')
    .isInt({ min: 1 })
    .withMessage('ID demande invalide'),
    
  body('action')
    .isIn(['approve', 'reject', 'request_info'])
    .withMessage('Action invalide (approve, reject, request_info)'),
    
  body('comment')
    .optional()
    .trim()
    .isLength({ max: 1000 })
    .withMessage('Commentaire max 1000 caract√®res'),
    
  body('amountApproved')
    .optional()
    .isFloat({ min: 0 })
    .withMessage('Montant approuv√© invalide'),
    
  body('conditions')
    .optional()
    .trim()
    .isLength({ max: 1000 })
    .withMessage('Conditions max 1000 caract√®res'),
    
  body('rejectionReason')
    .if(body('action').equals('reject'))
    .trim()
    .isLength({ min: 10, max: 1000 })
    .withMessage('Motif refus requis (10-1000 caract√®res)'),
    
  body('requestedInfo')
    .if(body('action').equals('request_info'))
    .trim()
    .isLength({ min: 10, max: 1000 })
    .withMessage('Informations demand√©es requises (10-1000 caract√®res)'),
    
  handleValidationErrors
];

// üìù ROUTES CRUD DEMANDES

/**
 * @route POST /api/v1/associations/:associationId/expense-requests
 * @desc Cr√©er nouvelle demande de d√©pense
 * @access Membres (aides) / Bureau (autres d√©penses)
 */
router.post('/:associationId/expense-requests',
  authMiddleware,
  checkAssociationMember,
  validateCreateExpenseRequest,
  expenseRequestController.createExpenseRequest
);

/**
 * @route GET /api/v1/associations/:associationId/expense-requests
 * @desc Lister demandes d√©penses avec filtres et pagination
 * @access Membres (selon permissions)
 */
router.get('/:associationId/expense-requests',
  authMiddleware,
  checkAssociationMember,
  // ‚úÖ PERMISSIONS: Ajouter v√©rification vue financi√®re
  checkPermission('view_finances'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    query('status')
      .optional()
      .isIn(['pending', 'under_review', 'additional_info_needed', 'approved', 'rejected', 'paid', 'cancelled'])
      .withMessage('Statut invalide'),
      
    query('expenseType')
      .optional()
      .isIn(['aide_membre', 'depense_operationnelle', 'pret_partenariat', 'projet_special', 'urgence_communautaire'])
      .withMessage('Type d√©pense invalide'),
      
    query('requesterId')
      .optional()
      .isInt({ min: 1 })
      .withMessage('ID demandeur invalide'),
      
    query('beneficiaryId')
      .optional()
      .isInt({ min: 1 })
      .withMessage('ID b√©n√©ficiaire invalide'),
      
    query('minAmount')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Montant minimum invalide'),
      
    query('maxAmount')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Montant maximum invalide'),
      
    query('dateFrom')
      .optional()
      .isISO8601()
      .withMessage('Date d√©but invalide'),
      
    query('dateTo')
      .optional()
      .isISO8601()
      .withMessage('Date fin invalide'),
      
    query('urgencyLevel')
      .optional()
      .isIn(['low', 'normal', 'high', 'critical'])
      .withMessage('Niveau urgence invalide'),
      
    query('isLoan')
      .optional()
      .isBoolean()
      .withMessage('isLoan doit √™tre boolean'),
      
    query('page')
      .optional()
      .isInt({ min: 1 })
      .withMessage('Page invalide'),
      
    query('limit')
      .optional()
      .isInt({ min: 1, max: 100 })
      .withMessage('Limite invalide (1-100)'),
      
    query('sortBy')
      .optional()
      .isIn(['created_at', 'amountRequested', 'urgencyLevel', 'status'])
      .withMessage('Tri invalide'),
      
    query('sortOrder')
      .optional()
      .isIn(['ASC', 'DESC'])
      .withMessage('Ordre tri invalide'),
      
    handleValidationErrors
  ],
  expenseRequestController.getExpenseRequests
);

/**
 * @route GET /api/v1/associations/:associationId/expense-requests/:requestId
 * @desc D√©tails d'une demande de d√©pense
 * @access Demandeur + Bureau avec droits + B√©n√©ficiaire
 */
router.get('/:associationId/expense-requests/:requestId',
  authMiddleware,
  checkAssociationMember,
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    handleValidationErrors
  ],
  expenseRequestController.getExpenseRequestDetails
);

/**
 * @route PUT /api/v1/associations/:associationId/expense-requests/:requestId
 * @desc Modifier demande (avant validation compl√®te)
 * @access Demandeur + Bureau
 */
router.put('/:associationId/expense-requests/:requestId',
  authMiddleware,
  checkAssociationMember,
  validateUpdateExpenseRequest,
  expenseRequestController.updateExpenseRequest
);

/**
 * @route DELETE /api/v1/associations/:associationId/expense-requests/:requestId
 * @desc Annuler/supprimer demande
 * @access Demandeur + Bureau
 */
router.delete('/:associationId/expense-requests/:requestId',
  authMiddleware,
  checkAssociationMember,
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    body('reason')
      .optional()
      .trim()
      .isLength({ max: 500 })
      .withMessage('Raison max 500 caract√®res'),
      
    handleValidationErrors
  ],
  expenseRequestController.cancelExpenseRequest
);

// ‚öñÔ∏è ROUTES VALIDATION/APPROBATION

/**
 * @route POST /api/v1/associations/:associationId/expense-requests/:requestId/approve
 * @desc Approuver une demande de d√©pense
 * @access Bureau avec droits validation (president, tresorier, secretaire, admin_association)
 */
router.post('/:associationId/expense-requests/:requestId/approve',
  authMiddleware,
  checkAssociationMember,
  checkPermission('validate_expenses'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    body('comment')
      .optional()
      .trim()
      .isLength({ max: 1000 })
      .withMessage('Commentaire max 1000 caract√®res'),
      
    body('amountApproved')
      .optional()
      .isFloat({ min: 0.01 })
      .withMessage('Montant approuv√© invalide'),
      
    body('conditions')
      .optional()
      .trim()
      .isLength({ max: 1000 })
      .withMessage('Conditions max 1000 caract√®res'),
      
    handleValidationErrors
  ],
  expenseRequestController.approveExpenseRequest
);

/**
 * @route POST /api/v1/associations/:associationId/expense-requests/:requestId/reject
 * @desc Refuser une demande de d√©pense
 * @access Bureau avec droits validation (president, tresorier, secretaire, admin_association)
 */
router.post('/:associationId/expense-requests/:requestId/reject',
  authMiddleware,
  checkAssociationMember,
  checkPermission('validate_expenses'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    body('rejectionReason')
      .trim()
      .isLength({ min: 10, max: 1000 })
      .withMessage('Motif de refus requis (10-1000 caract√®res)'),
      
    handleValidationErrors
  ],
  expenseRequestController.rejectExpenseRequest
);

/**
 * @route POST /api/v1/associations/:associationId/expense-requests/:requestId/request-info
 * @desc Demander des informations compl√©mentaires
 * @access Bureau avec droits validation (president, tresorier, secretaire, admin_association)
 */
router.post('/:associationId/expense-requests/:requestId/request-info',
  authMiddleware,
  checkAssociationMember,
  checkPermission('validate_expenses'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    body('requestedInfo')
      .trim()
      .isLength({ min: 10, max: 1000 })
      .withMessage('Informations demand√©es requises (10-1000 caract√®res)'),
      
    handleValidationErrors
  ],
  expenseRequestController.requestAdditionalInfo
);

/**
 * @route GET /api/v1/associations/:associationId/expense-requests-pending
 * @desc Demandes en attente de validation pour cet utilisateur
 * @access Bureau avec droits validation
 */
router.get('/:associationId/expense-requests-pending',
  authMiddleware,
  checkAssociationMember,
  checkPermission('validate_expenses'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    handleValidationErrors
  ],
  expenseRequestController.getPendingValidations
);

/**
 * @route GET /api/v1/associations/:associationId/expense-requests/pending-validations
 * @desc Demandes en attente de validation pour cet utilisateur
 * @access Bureau avec droits validation
 */
router.get('/:associationId/expense-requests/pending-validations',
  authMiddleware,
  checkAssociationMember,
  // ‚úÖ CORRECTION: Utiliser le middleware centralis√©
  checkPermission('validate_expenses'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    handleValidationErrors
  ],
  expenseRequestController.getPendingValidations
);

/**
 * @route GET /api/v1/associations/:associationId/expense-requests/:requestId/validation-history
 * @desc Historique des validations pour une demande
 * @access Bureau + Demandeur
 */
router.get('/:associationId/expense-requests/:requestId/validation-history',
  authMiddleware,
  checkAssociationMember,
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    handleValidationErrors
  ],
  expenseRequestController.getValidationHistory
);

// üí≥ ROUTES PAIEMENT

/**
 * @route POST /api/v1/associations/:associationId/expense-requests/:requestId/pay
 * @desc Confirmer paiement (manuel pour l'instant)
 * @access Tr√©sorier + Pr√©sident + admin_association
 */
router.post('/:associationId/expense-requests/:requestId/pay',
  authMiddleware,
  checkAssociationMember,
  // ‚úÖ CORRECTION: Utiliser validation financi√®re pour paiements aussi
  checkPermission('validate_expenses'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    body('paymentMode')
      .isIn(['manual'])
      .withMessage('Mode paiement invalide'), // 'digital' ajout√© plus tard
      
    body('paymentMethod')
      .isIn(['bank_transfer', 'cash', 'check', 'mobile_money'])
      .withMessage('M√©thode paiement invalide'),
      
    body('manualPaymentReference')
      .optional()
      .trim()
      .isLength({ max: 255 })
      .withMessage('R√©f√©rence max 255 caract√®res'),
      
    body('manualPaymentDetails')
      .optional()
      .isObject()
      .withMessage('D√©tails paiement doivent √™tre un objet'),
      
    body('paymentDate')
      .optional()
      .isISO8601()
      .withMessage('Date paiement invalide'),
      
    body('notes')
      .optional()
      .trim()
      .isLength({ max: 1000 })
      .withMessage('Notes max 1000 caract√®res'),
      
    handleValidationErrors
  ],
  expenseRequestController.processPayment
);

// üîÑ ROUTES REMBOURSEMENTS (PR√äTS)

/**
 * @route GET /api/v1/associations/:associationId/expense-requests/:requestId/repayments
 * @desc Lister remboursements d'un pr√™t
 * @access Bureau + B√©n√©ficiaire
 */
router.get('/:associationId/expense-requests/:requestId/repayments',
  authMiddleware,
  checkAssociationMember,
  checkPermission('view_finances'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    handleValidationErrors
  ],
  expenseRequestController.getRepayments
);

/**
 * @route POST /api/v1/associations/:associationId/expense-requests/:requestId/repayments
 * @desc Enregistrer remboursement de pr√™t
 * @access Tr√©sorier + admin_association
 */
router.post('/:associationId/expense-requests/:requestId/repayments',
  authMiddleware,
  checkAssociationMember,
  // ‚úÖ CORRECTION: Validation financi√®re pour remboursements
  checkPermission('validate_expenses'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    param('requestId')
      .isInt({ min: 1 })
      .withMessage('ID demande invalide'),
      
    body('amount')
      .isFloat({ min: 0.01 })
      .withMessage('Montant remboursement requis'),
      
    body('paymentDate')
      .isISO8601()
      .withMessage('Date paiement requise'),
      
    body('paymentMethod')
      .isIn(['bank_transfer', 'card_payment', 'cash', 'check', 'mobile_money'])
      .withMessage('M√©thode paiement invalide'),
      
    body('paymentMode')
      .optional()
      .isIn(['digital', 'manual'])
      .withMessage('Mode paiement invalide'),
      
    body('manualReference')
      .optional()
      .trim()
      .isLength({ max: 255 })
      .withMessage('R√©f√©rence max 255 caract√®res'),
      
    body('notes')
      .optional()
      .trim()
      .isLength({ max: 1000 })
      .withMessage('Notes max 1000 caract√®res'),
      
    handleValidationErrors
  ],
  expenseRequestController.recordRepayment
);

// üìä ROUTES STATISTIQUES & ANALYTICS

/**
 * @route GET /api/v1/associations/:associationId/expense-requests/statistics
 * @desc Statistiques d√©penses association
 * @access Bureau Central avec droits finances
 */
router.get('/:associationId/expense-requests/statistics',
  authMiddleware,
  checkAssociationMember,
  // ‚úÖ CORRECTION: Vue financi√®re au lieu de validation
  checkPermission('view_finances'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    query('period')
      .optional()
      .isIn(['month', 'quarter', 'year', 'all'])
      .withMessage('P√©riode invalide'),
      
    query('groupBy')
      .optional()
      .isIn(['type', 'month', 'section', 'status'])
      .withMessage('Groupement invalide'),
      
    handleValidationErrors
  ],
  expenseRequestController.getExpenseStatistics
);

/**
 * @route GET /api/v1/associations/:associationId/financial-summary
 * @desc R√©sum√© financier complet association
 * @access admin_association, president, tresorier, secretaire
 */
router.get('/:associationId/financial-summary',
  authMiddleware,
  checkAssociationMember,
  checkPermission('view_finances'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    query('period')
      .optional()
      .isIn(['all', 'month', 'quarter', 'year'])
      .withMessage('P√©riode invalide'),
      
    query('includeProjections')
      .optional()
      .isBoolean()
      .withMessage('includeProjections doit √™tre boolean'),
      
    query('includeAlerts')
      .optional()
      .isBoolean()
      .withMessage('includeAlerts doit √™tre boolean'),
      
    query('includeHistory')
      .optional()
      .isBoolean()
      .withMessage('includeHistory doit √™tre boolean'),
      
    query('historyMonths')
      .optional()
      .isInt({ min: 1, max: 24 })
      .withMessage('historyMonths doit √™tre entre 1 et 24'),
      
    handleValidationErrors
  ],
  expenseRequestController.getFinancialSummary
);

/**
 * @route GET /api/v1/associations/:associationId/expense-requests/export
 * @desc Export comptable des d√©penses
 * @access Tr√©sorier + Pr√©sident + admin_association
 */
router.get('/:associationId/expense-requests/export',
  authMiddleware,
  checkAssociationMember,
  // ‚úÖ CORRECTION: Vue financi√®re pour exports
  checkPermission('view_finances'),
  [
    param('associationId')
      .isInt({ min: 1 })
      .withMessage('ID association invalide'),
      
    query('format')
      .optional()
      .isIn(['excel', 'csv', 'pdf'])
      .withMessage('Format invalide'),
      
    query('dateFrom')
      .isISO8601()
      .withMessage('Date d√©but requise'),
      
    query('dateTo')
      .isISO8601()
      .withMessage('Date fin requise'),
      
    query('includeDetails')
      .optional()
      .isBoolean()
      .withMessage('includeDetails doit √™tre boolean'),
      
    handleValidationErrors
  ],
  expenseRequestController.exportExpenseData
);

module.exports = router;