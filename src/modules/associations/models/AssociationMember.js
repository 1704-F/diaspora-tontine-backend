//src/modules/associations/models/AssociationMember.js
'use strict';
const { Model } = require('sequelize');

module.exports = (sequelize, DataTypes) => {
  class AssociationMember extends Model {
    static associate(models) {
      // Un membre appartient √† un utilisateur
      AssociationMember.belongsTo(models.User, {
        foreignKey: 'userId',
        as: 'user'
      });
      
      // Un membre appartient √† une association
      AssociationMember.belongsTo(models.Association, {
        foreignKey: 'associationId',
        as: 'association'
      });
      
      // Un membre peut appartenir √† une section (optionnel)
      AssociationMember.belongsTo(models.Section, {
        foreignKey: 'sectionId',
        as: 'section'
      });
      
      // Un membre a plusieurs transactions (cotisations, aides)
      AssociationMember.hasMany(models.Transaction, {
        foreignKey: 'memberId',
        as: 'transactions'
      });
    }

    // ‚úÖ NOUVEAU - V√©rifier si a une permission sp√©cifique
    hasPermission(permission) {
      // 1. Si admin, toutes permissions
      if (this.isAdmin) {
        return true;
      }
      
      // 2. V√©rifier customPermissions granted
      if (this.customPermissions?.granted?.includes(permission)) {
        return true;
      }
      
      // 3. V√©rifier customPermissions revoked
      if (this.customPermissions?.revoked?.includes(permission)) {
        return false;
      }
      
      // 4. V√©rifier dans les r√¥les attribu√©s
      if (!this.association?.rolesConfiguration) return false;
      
      const assignedRoles = this.assignedRoles || [];
      const rolesConfig = this.association.rolesConfiguration.roles || [];
      
      for (const roleId of assignedRoles) {
        const role = rolesConfig.find(r => r.id === roleId);
        if (role?.permissions?.includes(permission)) {
          return true;
        }
      }
      
      return false;
    }

    // ‚úÖ NOUVEAU - R√©cup√©rer toutes les permissions effectives
    getEffectivePermissions() {
      // Admin a toutes permissions
      if (this.isAdmin) {
        return this.association?.rolesConfiguration?.availablePermissions?.map(p => p.id) || [];
      }
      
      const permissions = new Set();
      
      // Permissions des r√¥les
      const assignedRoles = this.assignedRoles || [];
      const rolesConfig = this.association?.rolesConfiguration?.roles || [];
      
      for (const roleId of assignedRoles) {
        const role = rolesConfig.find(r => r.id === roleId);
        if (role?.permissions) {
          role.permissions.forEach(p => permissions.add(p));
        }
      }
      
      // Ajouter customPermissions granted
      (this.customPermissions?.granted || []).forEach(p => permissions.add(p));
      
      // Retirer customPermissions revoked
      (this.customPermissions?.revoked || []).forEach(p => permissions.delete(p));
      
      return Array.from(permissions);
    }

    // Calculer anciennet√© totale (import + app)
    getTotalSeniority() {
      const imported = this.ancienneteImported || 0;
      const app = this.getAppSeniority();
      return imported + app;
    }

    // Calculer anciennet√© dans l'app
    getAppSeniority() {
      if (!this.joinDate) return 0;
      const now = new Date();
      const join = new Date(this.joinDate);
      const diffTime = Math.abs(now - join);
      return Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));
    }

    // V√©rifier si cotisation √† jour ce mois
    async isCurrentMonthPaid() {
      const { Transaction } = sequelize.models;
      const startOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1);
      const endOfMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0);
      
      const payment = await Transaction.findOne({
        where: { 
          memberId: this.id,
          type: 'cotisation',
          status: 'completed',
          createdAt: {
            [sequelize.Sequelize.Op.between]: [startOfMonth, endOfMonth]
          }
        }
      });
      
      return !!payment;
    }

    // Calculer total cotisations vers√©es
    async getTotalContributions() {
      const { Transaction } = sequelize.models;
      const result = await Transaction.findOne({
        where: { 
          memberId: this.id,
          type: 'cotisation',
          status: 'completed'
        },
        attributes: [
          [sequelize.fn('SUM', sequelize.col('amount')), 'total']
        ],
        raw: true
      });
      return parseFloat(result?.total || 0);
    }

    // Calculer total aides re√ßues
    async getTotalAidsReceived() {
      const { Transaction } = sequelize.models;
      const result = await Transaction.findOne({
        where: { 
          memberId: this.id,
          type: 'aide',
          status: 'completed'
        },
        attributes: [
          [sequelize.fn('SUM', sequelize.col('amount')), 'total']
        ],
        raw: true
      });
      return parseFloat(result?.total || 0);
    }

    // V√©rifier √©ligibilit√© aide selon r√®gles
    isEligibleForAid(aidAmount) {
      if (this.status !== 'active') return false;
      
      const settings = this.association?.settings || {};
      const aidRules = settings.aidRules || {};
      
      // V√©rifier anciennet√© minimum
      if (aidRules.minSeniority && this.getTotalSeniority() < aidRules.minSeniority) {
        return false;
      }
      
      // V√©rifier cotisations √† jour
      if (aidRules.requireCurrentPayments && !this.isCurrentMonthPaid()) {
        return false;
      }
      
      return true;
    }
  }

  AssociationMember.init({
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    
    // üîó RELATIONS PRINCIPALES
    userId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'users',
        key: 'id'
      },
      comment: 'Utilisateur membre'
    },
    
    associationId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'associations',
        key: 'id'
      },
      comment: 'Association dont il est membre'
    },
    
    sectionId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'sections',
        key: 'id'
      },
      comment: 'Section g√©ographique (optionnel)'
    },
    
    // üîê ADMIN ASSOCIATION (cr√©ateur)
    isAdmin: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
      comment: 'Admin de l\'association (cr√©ateur qui peut g√©rer r√¥les et param√®tres)'
    },
    
    // üéØ SYST√àME RBAC - R√¥les attribu√©s
    assignedRoles: {
      type: DataTypes.JSONB,
      allowNull: false,
      defaultValue: [],
      comment: 'IDs des r√¥les attribu√©s (ex: ["president_role", "tresorier_role"])'
    },
    
    // üîê PERMISSIONS PERSONNALIS√âES (override)
    customPermissions: {
      type: DataTypes.JSONB,
      allowNull: false,
      defaultValue: { granted: [], revoked: [] },
      comment: 'Permissions ajout√©es/retir√©es en plus des r√¥les: {granted: [...], revoked: [...]}'
    },
    
    // üè∑Ô∏è TYPE & STATUT MEMBRE (CONFIGURABLE)
    memberType: {
      type: DataTypes.STRING(50),
      allowNull: false,
      comment: 'Type membre configurable par association (ex: "actif", "fondateur", "ancien")'
    },
    
    status: {
      type: DataTypes.STRING(20),
      allowNull: false,
      defaultValue: 'pending',
      validate: {
        isIn: [['pending', 'active', 'suspended', 'excluded', 'inactive']]
      },
      comment: 'Statut actuel du membre'
    },
    
    // üìÖ DATES IMPORTANTES
    joinDate: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW,
      comment: 'Date d\'adh√©sion √† l\'association'
    },
    
    approvedDate: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Date d\'approbation par le bureau'
    },
    
    approvedBy: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'users',
        key: 'id'
      },
      comment: 'Membre bureau qui a approuv√©'
    },
    
    // ‚è∞ ANCIENNET√â (DIFF√âRENCIATEUR CL√â)
    ancienneteImported: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 0,
      comment: 'Anciennet√© avant app (mois) - import historique'
    },
    
    // üí∞ CONFIGURATION COTISATIONS
    cotisationAmount: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: true,
      comment: 'Montant cotisation personnalis√©e (si diff√©rent du type)'
    },
    
    autoPaymentEnabled: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
      comment: 'Pr√©l√®vement automatique activ√©'
    },
    
    paymentMethod: {
      type: DataTypes.STRING(20),
      allowNull: true,
      comment: 'M√©thode paiement pr√©f√©r√©e (card, iban)'
    },
    
    paymentMethodId: {
      type: DataTypes.STRING(255),
      allowNull: true,
      comment: 'ID m√©thode paiement (Stripe/Square)'
    },
    
    // üìä STATISTIQUES FINANCI√àRES
    totalContributed: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false,
      defaultValue: 0.00,
      comment: 'Total cotisations vers√©es (mis √† jour automatiquement)'
    },
    
    totalAidsReceived: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false,
      defaultValue: 0.00,
      comment: 'Total aides re√ßues (mis √† jour automatiquement)'
    },
    
    lastContributionDate: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Date derni√®re cotisation'
    },
    
    contributionStatus: {
      type: DataTypes.STRING(20),
      allowNull: false,
      defaultValue: 'uptodate',
      validate: {
        isIn: [['uptodate', 'late', 'very_late']]
      },
      comment: 'Statut cotisations'
    },
    
    // üìã INFORMATIONS ADDITIONNELLES
    notes: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Notes internes bureau association'
    },
    
    socialProfileVisible: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: true,
      comment: 'Profil visible autres membres'
    },
    
    // üì± PREFERENCES COMMUNICATION
    notificationPreferences: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'Pr√©f√©rences notifications (SMS, email, push)'
    },
    
    // üîÑ HISTORIQUE TRANSFERTS
    transferHistory: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'Historique transferts inter-sections'
    },
    
    // üìÖ DATES AUDIT
    lastActiveDate: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Derni√®re activit√© dans association'
    },
    
    suspensionReason: {
      type: DataTypes.STRING(255),
      allowNull: true,
      comment: 'Raison suspension/exclusion'
    }
  }, {
    sequelize,
    modelName: 'AssociationMember',
    tableName: 'association_members',
    underscored: true,
    timestamps: true,
    
    hooks: {
      afterCreate: async (member) => {
        // ‚úÖ NOUVEAU : Si premier membre, le rendre admin automatiquement
        const { AssociationMember } = sequelize.models;
        const membersCount = await AssociationMember.count({
          where: { associationId: member.associationId }
        });
        
        if (membersCount === 1 && !member.isAdmin) {
          await member.update({ 
            isAdmin: true,
            customPermissions: {
              granted: ['manage_roles', 'manage_association_settings'],
              revoked: []
            }
          });
          console.log(`‚úÖ Premier membre ${member.userId} d√©fini comme admin de l'association ${member.associationId}`);
        }
      }
    },
    
    indexes: [
      {
        fields: ['user_id']
      },
      {
        fields: ['association_id']
      },
      {
        fields: ['section_id']
      },
      {
        fields: ['status']
      },
      {
        fields: ['member_type']
      },
      {
        unique: true,
        fields: ['user_id', 'association_id'],
        name: 'unique_user_per_association'
      },
      {
        fields: ['contribution_status']
      },
      {
        fields: ['is_admin'] // ‚Üê Nouvel index
      }
    ]
  });

  return AssociationMember;
};